/*
 * Copyright 2021, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url = "https://spine.mycloudrepo.io/public/repositories/snapshots"
        }
    }

    dependencies {
        classpath("io.spine.tools:spine-mc-java:2.0.0-SNAPSHOT.29")
        classpath("com.google.protobuf:protobuf-gradle-plugin:0.8.16")
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.5.0"
}

apply(plugin: "io.spine.mc-java")
apply(plugin: "com.google.protobuf")

dependencies {
    implementation("io.spine:spine-server:2.0.0-jdk8.SNAPSHOT.10")
    implementation("io.spine.protodata:compiler:${rootProject.ext.protoDataVersion}")
    implementation("org.jboss.forge.roaster:roaster-api:2.21.2.Final")
    implementation("org.jboss.forge.roaster:roaster-jdt:2.21.2.Final")
    implementation("com.squareup:javapoet:1.13.0")
}

modelCompiler {

    interfaces {
        mark messages().inFiles(suffix: "events.proto"), asType("io.spine.base.EventMessage")
        mark messages().entityState(), asType("io.spine.base.EntityState")
    }
}
